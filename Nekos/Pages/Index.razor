@page "/"
@inject IJSRuntime JS

<div class="text-center" tabindex="0" @onkeydown="KeyDown" @ontouchstart="HandleTouchStart" @ontouchend="HandleTouchEnd" @ref="Div" style="background: var(--bs-gray-700);">
    <img class="img-fluid" src="@ImageUrl" style="box-shadow: 0px 0px 15px 10px;@(mobile ? "max-height: 100vh;" : "height: 100vh;")">
    
    <!-- Start: Preload iamges -->
    <img src="@PreloadImageUrl1" style="width: 0;">
    <img src="@PreloadImageUrl2" style="width: 0;">
    @*<img src="@PreloadImageUrl1" width="0" height="0">
    <img src="@PreloadImageUrl2" width="0" height="0">*@
    <!-- End: Preload iamges -->

    <!-- Start: Footer Dark -->
    <footer class="footer-dark">
        <div class="container">
            <div class="row">
                <!-- Start: Social Icons -->
                <div class="col item social"><a href="https://github.com/MarkenJaden/Nekos" target="_blank"><i class="icon ion-social-github"></i></a></div><!-- End: Social Icons -->
            </div><!-- Start: Copyright -->
            <p class="copyright">MarkenJaden | Nekos © @DateTime.Now.Year -&nbsp;I do not own or save any of the images displayed.</p><!-- End: Copyright -->
        </div>
    </footer><!-- End: Footer Dark -->
</div>

@code
{
    public string ImageUrl = "https://media.giphy.com/media/wnYB3vx9t6PXiq1ubB/giphy.gif";
    public string PreloadImageUrl1 = "https://media.giphy.com/media/wnYB3vx9t6PXiq1ubB/giphy.gif";
    public string PreloadImageUrl2 = "https://media.giphy.com/media/wnYB3vx9t6PXiq1ubB/giphy.gif";

    private NekoClient NekoClient = new(Random.Shared.NextInt64().ToString());

    private LinkedList<string> History = new();

    protected ElementReference Div;  // set by the @ref attribute

    private string isDevice { get; set; }
    private bool mobile { get; set; } = true;

    protected override Task OnInitializedAsync()
    {

        ImageUrl = NekoClient.Nsfw_v3.Neko().Result.ImageUrl;
        do
        {
            PreloadImageUrl1 = NekoClient.Nsfw_v3.Neko().Result.ImageUrl;
        } while (PreloadImageUrl1.Equals(ImageUrl));

        do
        {
            PreloadImageUrl2 = NekoClient.Nsfw_v3.Neko().Result.ImageUrl;
        } while (PreloadImageUrl2.Equals(PreloadImageUrl1) || PreloadImageUrl2.Equals(ImageUrl));

        History.AddLast(ImageUrl);
        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            mobile = await JS.InvokeAsync<bool>("isDevice");
            isDevice = mobile ? "Mobile" : "Desktop";

            StateHasChanged();
            
            await JS.InvokeVoidAsync("SetFocusToElement", Div);
        }
    }

    protected void KeyDown(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "ArrowRight":
                Next();
                break;
            case "ArrowLeft":
                Previous();
                break;
        }
    }

    private void Next()
    {
        if (History.Last!.Value.Equals(ImageUrl))
        {
            ImageUrl = PreloadImageUrl1;
            History.AddLast(ImageUrl);

            PreloadImageUrl1 = PreloadImageUrl2;
            do
            {
                PreloadImageUrl2 = NekoClient.Nsfw_v3.Neko().Result.ImageUrl;
            } while (History.Contains(PreloadImageUrl2) || PreloadImageUrl1.Equals(PreloadImageUrl2));
        }
        else
        {
            ImageUrl = History.Find(ImageUrl)!.Next!.Value;
        }
    }

    private void Previous()
    {
        var linkedListNode = History.Find(ImageUrl)!.Previous;
        if (linkedListNode != null) ImageUrl = linkedListNode.Value;
    }

    //Swipe event
    (TouchPoint ReferencePoint, DateTime StartTime) startPoint;

    void HandleTouchStart(TouchEventArgs t)
    {
        startPoint.ReferencePoint = t.TargetTouches[0];
        startPoint.StartTime = DateTime.Now;
    }

    void HandleTouchEnd(TouchEventArgs t)
    {
        const double swipeThreshold = 0.4;
        try
        {
            var endReferencePoint = t.ChangedTouches[0];

            var diffX = startPoint.ReferencePoint.ClientX - endReferencePoint.ClientX;
            var diffY = startPoint.ReferencePoint.ClientY - endReferencePoint.ClientY;
            var diffTime = DateTime.Now - startPoint.StartTime;
            var velocityX = Math.Abs(diffX / diffTime.Milliseconds);
            var velocityY = Math.Abs(diffY / diffTime.Milliseconds);

            if (velocityX < swipeThreshold && velocityY < swipeThreshold) return;
            if (Math.Abs(velocityX - velocityY) < .5) return;
            
            if (velocityX >= swipeThreshold)
            {
                if (diffX < 0)
                {
                    //Right
                    Previous();
                }
                else
                {
                    //Left
                    Next();
                }
            }
            //if (velocityY >= swipeThreshold)
            //{
            //    if (diffY < 0)
            //    {
            //        //Down
            //    }
            //    else
            //    {
            //        //Up
            //    }
            //}
        }

        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
}
