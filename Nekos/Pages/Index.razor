@page "/"
@inject IJSRuntime _js
@inject Blazored.LocalStorage.ILocalStorageService _localStorage

<div class="text-center" id="wrapper" tabindex="0" @onkeydown="KeyDown" @ontouchstart="HandleTouchStart" @ontouchend="HandleTouchEnd" @ref="Div" style="background: var(--bs-gray-700); height: auto;">
    @if (!showFavorites)
    {
        <div id="content-wrapper" style="height: 100vh;">
            <img class="img-fluid" src="@ImageUrl" style="box-shadow: 0px 0px 15px 10px; @(mobile ? "max-height: 100vh;" : "height: 100vh;")">

            <!-- Start: Preload iamges -->
            <img src="@PreloadImageUrl1" style="width: 0;">
            <img src="@PreloadImageUrl2" style="width: 0;">
            <!-- End: Preload iamges -->
        </div>
        <!-- Start: Footer Dark -->
        <footer class="footer-dark">
            <div class="container">
                <div class="row">
                    <!-- Start: Social Icons -->
                    <div class="col item social"><a href="https://github.com/MarkenJaden/Nekos" target="_blank"><i class="icon ion-social-github"></i></a></div><!-- End: Social Icons -->
                </div><!-- Start: Copyright -->
                <p class="copyright">MarkenJaden | Nekos © @DateTime.Now.Year -&nbsp;I do not own or save any of the images displayed.</p><!-- End: Copyright -->
            </div>
        </footer>
        <!-- End: Footer Dark -->
        <nav class="navbar navbar-light navbar-expand fixed-bottom">
            <div class="container-fluid">
                <div class="row mt-auto">
                    <div class="col">
                        @if (favorites.Count > 0)
                        {
                            <button class="btn btn-outline-light btn-lg border rounded-circle mt-auto" type="button" style="margin-right: 10px; height: 56.5px;" @onclick="ToggleFavoriteView"><i class="fas fa-images"></i></button>
                        }
                        <button class="btn btn-outline-@(favorites.Contains(ImageUrl) ? "warning" : "light") btn-lg border rounded-circle mt-auto" type="button" style="height: 56.5px;" @onclick="ToggleFavorite"><i class="fa fa-star"></i></button>
                    </div>
                </div>
                @if (!mobile && !keyBoardUsed)
                {
                    <img class="img-fluid ms-auto" src="assets/img/Keyboard.gif" width="250">
                }
            </div>
        </nav>
    }
    else
    {
        <div id="content-wrapper" style="min-height: 100vh;height: auto;">
            <!-- Start: 1 Row 3 Columns -->
            <div class="container">
                <div class="row justify-content-center">
                    @{
                        var chunks = favorites.Chunk(favorites.Count / 3).ToArray();
                        <div class="col">
                            @foreach(var img in chunks[0])
                            {
                                <a href="" @onclick="() => { ImageUrl = img; HistoryToFavorite(); ToggleFavoriteView(); }"><img class="img-fluid" src="@img" style="box-shadow: 0px 0px 15px 10px; max-height: 100vh;"></a>
                            }
                        </div>
                        <div class="col">
                            @foreach(var img in chunks[1])
                            {
                                <a href="" @onclick="() => { ImageUrl = img; HistoryToFavorite(); ToggleFavoriteView(); }"><img class="img-fluid" src="@img" style="box-shadow: 0px 0px 15px 10px; max-height: 100vh;"></a>
                            }
                        </div>
                        <div class="col">
                            @foreach (var img in chunks[2])
                            {
                                <a href="" @onclick="() => { ImageUrl = img; HistoryToFavorite(); ToggleFavoriteView(); }"><img class="img-fluid" src="@img" style="box-shadow: 0px 0px 15px 10px; max-height: 100vh;"></a>
                            }
                        </div>
                    }
                </div>
            </div><!-- End: 1 Row 3 Columns -->
        </div>
        <!-- Start: Footer Dark -->
        <footer class="footer-dark">
            <div class="container">
                <div class="row">
                    <!-- Start: Social Icons -->
                    <div class="col item social"><a href="https://github.com/MarkenJaden/Nekos" target="_blank"><i class="icon ion-social-github"></i></a></div><!-- End: Social Icons -->
                </div><!-- Start: Copyright -->
                <p class="copyright">MarkenJaden | Nekos © @DateTime.Now.Year -&nbsp;I do not own or save any of the images displayed.</p><!-- End: Copyright -->
            </div>
        </footer>
        <!-- End: Footer Dark -->
        <nav class="navbar navbar-light navbar-expand fixed-bottom">
            <div class="container-fluid">
                <div class="row mt-auto">
                    <div class="col">
                        <button class="btn btn-outline-light btn-lg border rounded-circle mt-auto" type="button" style="height: 56.5px;" @onclick="ToggleFavoriteView"><i class="fas fa-images"></i></button>
                    </div>
                </div>
            </div>
        </nav>
    }
</div>

@code
{
    public string ImageUrl = "https://media.giphy.com/media/wnYB3vx9t6PXiq1ubB/giphy.gif";
    public string PreloadImageUrl1 = "https://media.giphy.com/media/wnYB3vx9t6PXiq1ubB/giphy.gif";
    public string PreloadImageUrl2 = "https://media.giphy.com/media/wnYB3vx9t6PXiq1ubB/giphy.gif";

    private NekoClient NekoClient = new(Random.Shared.NextInt64().ToString());

    private LinkedList<string> History = new();

    protected ElementReference Div;  // set by the @ref attribute

    private string isDevice { get; set; } = "Desktop";
    private bool mobile { get; set; } = true;

    private bool keyBoardUsed;

    private List<string> favorites = new();

    private bool showFavorites;

    protected override Task OnInitializedAsync()
    {

        ImageUrl = NekoClient.Nsfw_v3.Neko().Result.ImageUrl;
        do
        {
            PreloadImageUrl1 = NekoClient.Nsfw_v3.Neko().Result.ImageUrl;
        } while (PreloadImageUrl1.Equals(ImageUrl));

        do
        {
            PreloadImageUrl2 = NekoClient.Nsfw_v3.Neko().Result.ImageUrl;
        } while (PreloadImageUrl2.Equals(PreloadImageUrl1) || PreloadImageUrl2.Equals(ImageUrl));

        History.AddLast(ImageUrl);
        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            mobile = await _js.InvokeAsync<bool>("isDevice");
            isDevice = mobile ? "Mobile" : "Desktop";

            StateHasChanged();

            await _js.InvokeVoidAsync("SetFocusToElement", Div);
        }

        if (!await _localStorage.ContainKeyAsync("favorites")) await _localStorage.SetItemAsync("favorites", favorites);
        favorites = await _localStorage.GetItemAsync<List<string>>("favorites");
        StateHasChanged();
    }

    protected void KeyDown(KeyboardEventArgs e)
    {
        if(showFavorites) return;
        switch (e.Key)
        {
            case "ArrowRight":
                Next();
                keyBoardUsed = true;
                break;
            case "ArrowLeft":
                Previous();
                break;
        }
    }

    private void Next()
    {
        if (History.Last!.Value.Equals(ImageUrl))
        {
            ImageUrl = PreloadImageUrl1;
            History.AddLast(ImageUrl);

            PreloadImageUrl1 = PreloadImageUrl2;
            do
            {
                PreloadImageUrl2 = NekoClient.Nsfw_v3.Neko().Result.ImageUrl;
            } while (History.Contains(PreloadImageUrl2) || PreloadImageUrl1.Equals(PreloadImageUrl2));
        }
        else
        {
            ImageUrl = History.Find(ImageUrl)!.Next!.Value;
        }
    }

    private void Previous()
    {
        var linkedListNode = History.Find(ImageUrl)!.Previous;
        if (linkedListNode != null) ImageUrl = linkedListNode.Value;
    }

    private async Task ToggleFavorite()
    {
        if (favorites.Contains(ImageUrl)) favorites.Remove(ImageUrl);
        else favorites.Add(ImageUrl);
        await _localStorage.SetItemAsync("favorites", favorites);
        StateHasChanged();
    }

    private async Task ToggleFavoriteView()
    {
        showFavorites = !showFavorites;
        if (!showFavorites) await _js.InvokeVoidAsync("SetFocusToElement", Div);
    }

    private void HistoryToFavorite()
    {
        History.Clear();
        foreach (var favorite in favorites)
        {
            History.AddLast(favorite);
        }
    }

    //Swipe event
    (TouchPoint ReferencePoint, DateTime StartTime) startPoint;

    void HandleTouchStart(TouchEventArgs t)
    {
        if(showFavorites) return;
        startPoint.ReferencePoint = t.TargetTouches[0];
        startPoint.StartTime = DateTime.Now;
    }

    void HandleTouchEnd(TouchEventArgs t)
    {
        if(showFavorites) return;
        const double swipeThreshold = 0.4;
        try
        {
            var endReferencePoint = t.ChangedTouches[0];

            var diffX = startPoint.ReferencePoint.ClientX - endReferencePoint.ClientX;
            var diffY = startPoint.ReferencePoint.ClientY - endReferencePoint.ClientY;
            var diffTime = DateTime.Now - startPoint.StartTime;
            var velocityX = Math.Abs(diffX / diffTime.Milliseconds);
            var velocityY = Math.Abs(diffY / diffTime.Milliseconds);

            if (velocityX < swipeThreshold && velocityY < swipeThreshold) return;
            if (Math.Abs(velocityX - velocityY) < .5) return;

            if (velocityX >= swipeThreshold)
            {
                if (diffX < 0)
                {
                    //Right
                    Previous();
                }
                else
                {
                    //Left
                    Next();
                }
            }
            //if (velocityY >= swipeThreshold)
            //{
            //    if (diffY < 0)
            //    {
            //        //Down
            //    }
            //    else
            //    {
            //        //Up
            //    }
            //}
        }

        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
}
