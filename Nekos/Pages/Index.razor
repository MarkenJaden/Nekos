@page "/"
@using CurrieTechnologies.Razor.Clipboard
@using Nekos.Utils
@using NekosAPI.NET.V3
@inject IJSRuntime Js
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject ClipboardService Clipboard
@inject MessageService Message

<div class="text-center" id="wrapper" tabindex="0" @onkeydown="KeyDown" @ontouchstart="HandleTouchStart" @ontouchend="HandleTouchEnd" @ref="Div" style="background: var(--bs-gray-700); height: auto;">
    @if (!_showFavorites)
    {
        <div id="content-wrapper" style="height: 100vh;">
            <img class="img-fluid" src="@(Image != null ? Image.Value.Image_url : "https://media.giphy.com/media/wnYB3vx9t6PXiq1ubB/giphy.gif")" style="box-shadow: 0px 0px 15px 10px; @(Mobile ? "max-height: 100vh;" : "height: 100vh;")" alt="Neko image">

            <!-- Start: Preload images -->
            @* ReSharper disable once MissingAltAttributeInImgTag *@
            <img src="@PreloadImageUrl1?.Value.Image_url" style="width: 0;">
            @* ReSharper disable once MissingAltAttributeInImgTag *@
            <img src="@PreloadImageUrl2?.Value.Image_url" style="width: 0;">
            <!-- End: Preload images -->
        </div>
        <nav class="navbar navbar-light navbar-expand fixed-bottom">
            <div class="container-fluid">
                <div class="row mt-auto">
                    <div class="col">
                        @if (_favorites is { Count: > 0 })
                        {
                            <button class="btn btn-outline-light btn-lg border rounded-circle mt-auto" type="button" style="margin-right: 10px; height: 56.5px;" @onclick="ToggleFavoriteView"><i class="fas fa-images"></i></button>
                        }
                        <button class="btn btn-outline-@(_favorites != null && _favorites.Exists(x => Image != null && x.Id.Equals(Image.Value.Id)) ? "warning" : "light") btn-lg border rounded-circle mt-auto" type="button" style="height: 56.5px;" @onclick="ToggleFavorite"><i class="fa fa-star"></i></button>
                        @if (_clipboardSupported)
                        {
                            <button class="btn btn-outline-light btn-lg border rounded-circle mt-auto" type="button" style="margin-left: 10px; height: 56.5px;" @onclick="async () => { if (Image != null) await Clipboard.WriteTextAsync(Image.Value.Image_url); await Message.Success(Copied + await GetAsciiNeko()); }"><i class="far fa-copy"></i></button>
                        }
                    </div>
                </div>
                @if (!Mobile && !_keyBoardUsed)
                {
                    <img class="img-fluid ms-auto" src="assets/img/Keyboard.gif" width="250" alt="Use arrow keys GIF">
                }
            </div>
        </nav>
    }
    else
    {
        <div id="content-wrapper" style="min-height: 100vh;height: auto;">
            <!-- Start: 1 Row 3 Columns -->
            <div class="container">
                <div class="row justify-content-center">
                    @{
                        var chunks = _favorites!.Chunk(_favorites!.Count / _favorites.Count > 3 ? 3 : _favorites.Count).ToArray();
                        @foreach (var chunk in chunks)
                        {
                            <div class="col">
                                @foreach (var img in chunk)
                                {
                                    <a href="" @onclick="() => { HistoryToFavorite(img); ToggleFavoriteView(); }"><img class="img-fluid" src="@img.Image_url" style="box-shadow: 0px 0px 15px 10px; max-height: 100vh;"></a>
                                }
                            </div>
                        }
                    }
                </div>
            </div><!-- End: 1 Row 3 Columns -->
        </div>
        <nav class="navbar navbar-light navbar-expand fixed-bottom">
            <div class="container-fluid">
                <div class="row mt-auto">
                    <div class="col">
                        <button class="btn btn-outline-light btn-lg border rounded-circle mt-auto" type="button" style="height: 56.5px;" @onclick="ToggleFavoriteView"><i class="fas fa-images"></i></button>
                    </div>
                </div>
            </div>
        </nav>
    }
    <!-- Start: Footer Dark -->
    <footer class="footer-dark">
        <div class="container">
            <div class="row">
                <!-- Start: Social Icons -->
                <div class="col item social"><a href="https://github.com/MarkenJaden/Nekos" target="_blank"><i class="icon ion-social-github"></i></a></div><!-- End: Social Icons -->
            </div><!-- Start: Copyright -->
            <p class="copyright">MarkenJaden | Nekos © @DateTime.Now.Year -&nbsp;I do not own or save any of the images displayed. Favorites are saved as link as cookie in local storage. API used: https://nekosapi.com/</p><!-- End: Copyright -->
        </div>
    </footer>
    <!-- End: Footer Dark -->
</div>

@code
{
    /// <summary>
    /// The URL of the main image displayed on the page
    /// </summary>
    public LinkedListNode<ImageSchema>? Image;

    /// <summary>
    /// The URL of a preloaded image displayed on the page
    /// </summary>
    public LinkedListNode<ImageSchema>? PreloadImageUrl1;

    /// <summary>
    /// The URL of a second preloaded image displayed on the page
    /// </summary>
    public LinkedListNode<ImageSchema>? PreloadImageUrl2;

    private readonly RandomNekoClient _nekoClient = new(new HttpClient());

    private readonly LinkedList<ImageSchema> _images = [];

    /// <summary>
    /// The reference to the HTML element that contains the image
    /// </summary>
    protected ElementReference Div;  // set by the @ref attribute

    private const string Copied = "Copied image link to clipboard ";

    /// <summary>
    /// A boolean indicating whether the page is being accessed on a mobile device
    /// </summary>
    private bool Mobile { get; set; } = true;

    private bool _keyBoardUsed;

    private bool _clipboardSupported;

    /// <summary>
    /// A list of image links that the user has marked as favorites
    /// </summary>
    private List<ImageSchema>? _favorites = [];

    /// <summary>
    /// A boolean indicating whether the "favorites" section of the page should be displayed
    /// </summary>
    private bool _showFavorites;

    private JsConsole _console = null!;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _console = new JsConsole(Js);
            _clipboardSupported = await Clipboard.IsSupportedAsync();
            Mobile = await Js.InvokeAsync<bool>("isDevice");

            await LoadImages();
            Image = _images.First;
            await _console.LogAsync($"Current image ID: {Image!.Value.Id}");

            await Js.InvokeVoidAsync("SetFocusToElement", Div);
        }

        try
        {
            if (!await LocalStorage.ContainKeyAsync("favorites")) await LocalStorage.SetItemAsync("favorites", _favorites);
            _favorites = await LocalStorage.GetItemAsync<List<ImageSchema>>("favorites");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            await LocalStorage.RemoveItemAsync("favorites");
            await LocalStorage.SetItemAsync("favorites", _favorites);
        }

        StateHasChanged();
    }

    private async Task Next()
    {
        Image = Image?.Next;
        StateHasChanged();
        if (Image != null)
        {
            PreloadImageUrl1 = Image.Next;
            PreloadImageUrl2 = PreloadImageUrl1!.Next;
            StateHasChanged();
            await _console.LogAsync($"Current image ID: {Image.Value.Id}");
            if (Image != null && _images.Count - _images.FindIndex(x => x.Equals(Image.Value)) < 20) await LoadImages();
        }
    }

    private async void Previous()
    {
        var previous = Image?.Previous;
        if (previous != null) Image = previous;
        StateHasChanged();
        if (Image != null) await _console.LogAsync($"Current image ID: {Image.Value.Id}");
    }

    private async Task LoadImages()
    {
        await _console.LogAsync("Loading new images in queue...");
        var images = await _nekoClient.ImagesAsync(rating: ["explicit"], tag: [8], is_screenshot:false);
        foreach (var image in images.Items) if (!_images.Any(x => x.Id.Equals(image.Id))) _images.AddLast(image);
        await _console.LogAsync($"Image loading finished. Total images in list: {_images.Count}");
    }

    /// <summary>
    /// Handles keyboard events for navigating between items in a collection.
    /// </summary>
    /// <param name="e">The keyboard event arguments.</param>
    protected void KeyDown(KeyboardEventArgs e)
    {
        if (_showFavorites) return;
        switch (e.Key)
        {
            case "ArrowRight":
#pragma warning disable CS4014 // Because this call is not awaited, execution of the current method continues before the call is completed
                Next();
#pragma warning restore CS4014 // Because this call is not awaited, execution of the current method continues before the call is completed
                _keyBoardUsed = true;
                break;
            case "ArrowLeft":
                Previous();
                break;
        }
    }

    private async Task ToggleFavorite()
    {
        if (Image != null)
        {
            if (_favorites != null && _favorites.Exists(x => x == Image?.Value))
            {
                _favorites.Remove(Image.Value);
            }
            else
            {
                _favorites?.Add(Image.Value);
            }
        }

        await LocalStorage.SetItemAsync("favorites", _favorites);
        StateHasChanged();
    }

    private async Task ToggleFavoriteView()
    {
        _showFavorites = !_showFavorites;
        if (!_showFavorites) await Js.InvokeVoidAsync("SetFocusToElement", Div);
    }

    private async Task HistoryToFavorite(ImageSchema showImage)
    {
        await _console.LogAsync("Overwrite history with favourites...");
        _images.Clear();
        if (_favorites == null) return;
        foreach (var favorite in _favorites) _images.AddLast(favorite);
        Image = _images.Find(_images.First(x => x.Id.Equals(showImage.Id)));
        StateHasChanged();
        await _console.LogAsync($"Overwrite complete. Current image ID: {Image!.Value.Id}");
        await LoadImages();
    }

    //Swipe event
    (TouchPoint ReferencePoint, DateTime StartTime) _startPoint;

    void HandleTouchStart(TouchEventArgs t)
    {
        if (_showFavorites) return;
        _startPoint.ReferencePoint = t.TargetTouches[0];
        _startPoint.StartTime = DateTime.Now;
    }

    void HandleTouchEnd(TouchEventArgs t)
    {
        if (_showFavorites) return;
        const double swipeThreshold = 0.4;
        try
        {
            var endReferencePoint = t.ChangedTouches[0];

            var diffX = _startPoint.ReferencePoint.ClientX - endReferencePoint.ClientX;
            var diffY = _startPoint.ReferencePoint.ClientY - endReferencePoint.ClientY;
            var diffTime = DateTime.Now - _startPoint.StartTime;
            var velocityX = Math.Abs(diffX / diffTime.Milliseconds);
            var velocityY = Math.Abs(diffY / diffTime.Milliseconds);

            if (velocityX < swipeThreshold && velocityY < swipeThreshold) return;
            if (Math.Abs(velocityX - velocityY) < .5) return;

            if (!(velocityX >= swipeThreshold)) return;
            if (diffX < 0)
            {
                //Right
                Previous();
            }
            else
            {
                //Left
#pragma warning disable CS4014 // Because this call is not awaited, execution of the current method continues before the call is completed
                Next();
#pragma warning restore CS4014 // Because this call is not awaited, execution of the current method continues before the call is completed
            }
            //if (velocityY >= swipeThreshold)
            //{
            //    if (diffY < 0)
            //    {
            //        //Down
            //    }
            //    else
            //    {
            //        //Up
            //    }
            //}
        }

        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private static Task<string> GetAsciiNeko()
    {
        //var t = await NekoClient.RequestAsciiCatsAsync();
        //return t.First().Cat;
        return Task.FromResult("UwU");
    }
}
